// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockchain_rpc.proto

#ifndef PROTOBUF_INCLUDED_blockchain_5frpc_2eproto
#define PROTOBUF_INCLUDED_blockchain_5frpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_blockchain_5frpc_2eproto 

namespace protobuf_blockchain_5frpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_blockchain_5frpc_2eproto
namespace core {
class GetBlockCountRequest;
class GetBlockCountRequestDefaultTypeInternal;
extern GetBlockCountRequestDefaultTypeInternal _GetBlockCountRequest_default_instance_;
class GetBlockCountResponse;
class GetBlockCountResponseDefaultTypeInternal;
extern GetBlockCountResponseDefaultTypeInternal _GetBlockCountResponse_default_instance_;
class GetBlockRequest;
class GetBlockRequestDefaultTypeInternal;
extern GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
class GetBlockResponse;
class GetBlockResponseDefaultTypeInternal;
extern GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
class GetBlockchainInfoRequest;
class GetBlockchainInfoRequestDefaultTypeInternal;
extern GetBlockchainInfoRequestDefaultTypeInternal _GetBlockchainInfoRequest_default_instance_;
class GetBlockchainInfoResponse;
class GetBlockchainInfoResponseDefaultTypeInternal;
extern GetBlockchainInfoResponseDefaultTypeInternal _GetBlockchainInfoResponse_default_instance_;
class GetRawTransactionRequest;
class GetRawTransactionRequestDefaultTypeInternal;
extern GetRawTransactionRequestDefaultTypeInternal _GetRawTransactionRequest_default_instance_;
class GetRawTransactionResponse;
class GetRawTransactionResponseDefaultTypeInternal;
extern GetRawTransactionResponseDefaultTypeInternal _GetRawTransactionResponse_default_instance_;
class SendRawTransactionRequest;
class SendRawTransactionRequestDefaultTypeInternal;
extern SendRawTransactionRequestDefaultTypeInternal _SendRawTransactionRequest_default_instance_;
class SendRawTransactionResponse;
class SendRawTransactionResponseDefaultTypeInternal;
extern SendRawTransactionResponseDefaultTypeInternal _SendRawTransactionResponse_default_instance_;
}  // namespace core
namespace google {
namespace protobuf {
template<> ::core::GetBlockCountRequest* Arena::CreateMaybeMessage<::core::GetBlockCountRequest>(Arena*);
template<> ::core::GetBlockCountResponse* Arena::CreateMaybeMessage<::core::GetBlockCountResponse>(Arena*);
template<> ::core::GetBlockRequest* Arena::CreateMaybeMessage<::core::GetBlockRequest>(Arena*);
template<> ::core::GetBlockResponse* Arena::CreateMaybeMessage<::core::GetBlockResponse>(Arena*);
template<> ::core::GetBlockchainInfoRequest* Arena::CreateMaybeMessage<::core::GetBlockchainInfoRequest>(Arena*);
template<> ::core::GetBlockchainInfoResponse* Arena::CreateMaybeMessage<::core::GetBlockchainInfoResponse>(Arena*);
template<> ::core::GetRawTransactionRequest* Arena::CreateMaybeMessage<::core::GetRawTransactionRequest>(Arena*);
template<> ::core::GetRawTransactionResponse* Arena::CreateMaybeMessage<::core::GetRawTransactionResponse>(Arena*);
template<> ::core::SendRawTransactionRequest* Arena::CreateMaybeMessage<::core::SendRawTransactionRequest>(Arena*);
template<> ::core::SendRawTransactionResponse* Arena::CreateMaybeMessage<::core::SendRawTransactionResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace core {

// ===================================================================

class GetBlockRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockRequest) */ {
 public:
  GetBlockRequest();
  virtual ~GetBlockRequest();

  GetBlockRequest(const GetBlockRequest& from);

  inline GetBlockRequest& operator=(const GetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockRequest(GetBlockRequest&& from) noexcept
    : GetBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockRequest& operator=(GetBlockRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequest*>(
               &_GetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GetBlockRequest* other);
  friend void swap(GetBlockRequest& a, GetBlockRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockRequest* New() const final {
    return CreateMaybeMessage<GetBlockRequest>(NULL);
  }

  GetBlockRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockRequest& from);
  void MergeFrom(const GetBlockRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 block_height = 1;
  void clear_block_height();
  static const int kBlockHeightFieldNumber = 1;
  ::google::protobuf::int32 block_height() const;
  void set_block_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:core.GetBlockRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 block_height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBlockchainInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockchainInfoRequest) */ {
 public:
  GetBlockchainInfoRequest();
  virtual ~GetBlockchainInfoRequest();

  GetBlockchainInfoRequest(const GetBlockchainInfoRequest& from);

  inline GetBlockchainInfoRequest& operator=(const GetBlockchainInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockchainInfoRequest(GetBlockchainInfoRequest&& from) noexcept
    : GetBlockchainInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockchainInfoRequest& operator=(GetBlockchainInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockchainInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockchainInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainInfoRequest*>(
               &_GetBlockchainInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GetBlockchainInfoRequest* other);
  friend void swap(GetBlockchainInfoRequest& a, GetBlockchainInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainInfoRequest* New() const final {
    return CreateMaybeMessage<GetBlockchainInfoRequest>(NULL);
  }

  GetBlockchainInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockchainInfoRequest& from);
  void MergeFrom(const GetBlockchainInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:core.GetBlockchainInfoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBlockCountRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockCountRequest) */ {
 public:
  GetBlockCountRequest();
  virtual ~GetBlockCountRequest();

  GetBlockCountRequest(const GetBlockCountRequest& from);

  inline GetBlockCountRequest& operator=(const GetBlockCountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockCountRequest(GetBlockCountRequest&& from) noexcept
    : GetBlockCountRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockCountRequest& operator=(GetBlockCountRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockCountRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockCountRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockCountRequest*>(
               &_GetBlockCountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetBlockCountRequest* other);
  friend void swap(GetBlockCountRequest& a, GetBlockCountRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockCountRequest* New() const final {
    return CreateMaybeMessage<GetBlockCountRequest>(NULL);
  }

  GetBlockCountRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockCountRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockCountRequest& from);
  void MergeFrom(const GetBlockCountRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockCountRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:core.GetBlockCountRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetRawTransactionRequest) */ {
 public:
  GetRawTransactionRequest();
  virtual ~GetRawTransactionRequest();

  GetRawTransactionRequest(const GetRawTransactionRequest& from);

  inline GetRawTransactionRequest& operator=(const GetRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRawTransactionRequest(GetRawTransactionRequest&& from) noexcept
    : GetRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline GetRawTransactionRequest& operator=(GetRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawTransactionRequest*>(
               &_GetRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetRawTransactionRequest* other);
  friend void swap(GetRawTransactionRequest& a, GetRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawTransactionRequest* New() const final {
    return CreateMaybeMessage<GetRawTransactionRequest>(NULL);
  }

  GetRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRawTransactionRequest& from);
  void MergeFrom(const GetRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string txid = 1;
  void clear_txid();
  static const int kTxidFieldNumber = 1;
  const ::std::string& txid() const;
  void set_txid(const ::std::string& value);
  #if LANG_CXX11
  void set_txid(::std::string&& value);
  #endif
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  ::std::string* mutable_txid();
  ::std::string* release_txid();
  void set_allocated_txid(::std::string* txid);

  // @@protoc_insertion_point(class_scope:core.GetRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr txid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendRawTransactionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.SendRawTransactionRequest) */ {
 public:
  SendRawTransactionRequest();
  virtual ~SendRawTransactionRequest();

  SendRawTransactionRequest(const SendRawTransactionRequest& from);

  inline SendRawTransactionRequest& operator=(const SendRawTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendRawTransactionRequest(SendRawTransactionRequest&& from) noexcept
    : SendRawTransactionRequest() {
    *this = ::std::move(from);
  }

  inline SendRawTransactionRequest& operator=(SendRawTransactionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRawTransactionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRawTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const SendRawTransactionRequest*>(
               &_SendRawTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SendRawTransactionRequest* other);
  friend void swap(SendRawTransactionRequest& a, SendRawTransactionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendRawTransactionRequest* New() const final {
    return CreateMaybeMessage<SendRawTransactionRequest>(NULL);
  }

  SendRawTransactionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendRawTransactionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendRawTransactionRequest& from);
  void MergeFrom(const SendRawTransactionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRawTransactionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string raw_transaction = 1;
  void clear_raw_transaction();
  static const int kRawTransactionFieldNumber = 1;
  const ::std::string& raw_transaction() const;
  void set_raw_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_transaction(::std::string&& value);
  #endif
  void set_raw_transaction(const char* value);
  void set_raw_transaction(const char* value, size_t size);
  ::std::string* mutable_raw_transaction();
  ::std::string* release_raw_transaction();
  void set_allocated_raw_transaction(::std::string* raw_transaction);

  // @@protoc_insertion_point(class_scope:core.SendRawTransactionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_transaction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBlockResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockResponse) */ {
 public:
  GetBlockResponse();
  virtual ~GetBlockResponse();

  GetBlockResponse(const GetBlockResponse& from);

  inline GetBlockResponse& operator=(const GetBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockResponse(GetBlockResponse&& from) noexcept
    : GetBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockResponse& operator=(GetBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponse*>(
               &_GetBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetBlockResponse* other);
  friend void swap(GetBlockResponse& a, GetBlockResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockResponse* New() const final {
    return CreateMaybeMessage<GetBlockResponse>(NULL);
  }

  GetBlockResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockResponse& from);
  void MergeFrom(const GetBlockResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string block_data = 1;
  void clear_block_data();
  static const int kBlockDataFieldNumber = 1;
  const ::std::string& block_data() const;
  void set_block_data(const ::std::string& value);
  #if LANG_CXX11
  void set_block_data(::std::string&& value);
  #endif
  void set_block_data(const char* value);
  void set_block_data(const char* value, size_t size);
  ::std::string* mutable_block_data();
  ::std::string* release_block_data();
  void set_allocated_block_data(::std::string* block_data);

  // @@protoc_insertion_point(class_scope:core.GetBlockResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr block_data_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBlockchainInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockchainInfoResponse) */ {
 public:
  GetBlockchainInfoResponse();
  virtual ~GetBlockchainInfoResponse();

  GetBlockchainInfoResponse(const GetBlockchainInfoResponse& from);

  inline GetBlockchainInfoResponse& operator=(const GetBlockchainInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockchainInfoResponse(GetBlockchainInfoResponse&& from) noexcept
    : GetBlockchainInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockchainInfoResponse& operator=(GetBlockchainInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockchainInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockchainInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockchainInfoResponse*>(
               &_GetBlockchainInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetBlockchainInfoResponse* other);
  friend void swap(GetBlockchainInfoResponse& a, GetBlockchainInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockchainInfoResponse* New() const final {
    return CreateMaybeMessage<GetBlockchainInfoResponse>(NULL);
  }

  GetBlockchainInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockchainInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockchainInfoResponse& from);
  void MergeFrom(const GetBlockchainInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockchainInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string chain_id = 1;
  void clear_chain_id();
  static const int kChainIdFieldNumber = 1;
  const ::std::string& chain_id() const;
  void set_chain_id(const ::std::string& value);
  #if LANG_CXX11
  void set_chain_id(::std::string&& value);
  #endif
  void set_chain_id(const char* value);
  void set_chain_id(const char* value, size_t size);
  ::std::string* mutable_chain_id();
  ::std::string* release_chain_id();
  void set_allocated_chain_id(::std::string* chain_id);

  // int32 block_count = 2;
  void clear_block_count();
  static const int kBlockCountFieldNumber = 2;
  ::google::protobuf::int32 block_count() const;
  void set_block_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:core.GetBlockchainInfoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr chain_id_;
  ::google::protobuf::int32 block_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetBlockCountResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetBlockCountResponse) */ {
 public:
  GetBlockCountResponse();
  virtual ~GetBlockCountResponse();

  GetBlockCountResponse(const GetBlockCountResponse& from);

  inline GetBlockCountResponse& operator=(const GetBlockCountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetBlockCountResponse(GetBlockCountResponse&& from) noexcept
    : GetBlockCountResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockCountResponse& operator=(GetBlockCountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetBlockCountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockCountResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockCountResponse*>(
               &_GetBlockCountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetBlockCountResponse* other);
  friend void swap(GetBlockCountResponse& a, GetBlockCountResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetBlockCountResponse* New() const final {
    return CreateMaybeMessage<GetBlockCountResponse>(NULL);
  }

  GetBlockCountResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockCountResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetBlockCountResponse& from);
  void MergeFrom(const GetBlockCountResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockCountResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 block_count = 1;
  void clear_block_count();
  static const int kBlockCountFieldNumber = 1;
  ::google::protobuf::int32 block_count() const;
  void set_block_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:core.GetBlockCountResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 block_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.GetRawTransactionResponse) */ {
 public:
  GetRawTransactionResponse();
  virtual ~GetRawTransactionResponse();

  GetRawTransactionResponse(const GetRawTransactionResponse& from);

  inline GetRawTransactionResponse& operator=(const GetRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetRawTransactionResponse(GetRawTransactionResponse&& from) noexcept
    : GetRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetRawTransactionResponse& operator=(GetRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawTransactionResponse*>(
               &_GetRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetRawTransactionResponse* other);
  friend void swap(GetRawTransactionResponse& a, GetRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetRawTransactionResponse* New() const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(NULL);
  }

  GetRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetRawTransactionResponse& from);
  void MergeFrom(const GetRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string raw_transaction = 1;
  void clear_raw_transaction();
  static const int kRawTransactionFieldNumber = 1;
  const ::std::string& raw_transaction() const;
  void set_raw_transaction(const ::std::string& value);
  #if LANG_CXX11
  void set_raw_transaction(::std::string&& value);
  #endif
  void set_raw_transaction(const char* value);
  void set_raw_transaction(const char* value, size_t size);
  ::std::string* mutable_raw_transaction();
  ::std::string* release_raw_transaction();
  void set_allocated_raw_transaction(::std::string* raw_transaction);

  // @@protoc_insertion_point(class_scope:core.GetRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr raw_transaction_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendRawTransactionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:core.SendRawTransactionResponse) */ {
 public:
  SendRawTransactionResponse();
  virtual ~SendRawTransactionResponse();

  SendRawTransactionResponse(const SendRawTransactionResponse& from);

  inline SendRawTransactionResponse& operator=(const SendRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendRawTransactionResponse(SendRawTransactionResponse&& from) noexcept
    : SendRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline SendRawTransactionResponse& operator=(SendRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const SendRawTransactionResponse*>(
               &_SendRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SendRawTransactionResponse* other);
  friend void swap(SendRawTransactionResponse& a, SendRawTransactionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendRawTransactionResponse* New() const final {
    return CreateMaybeMessage<SendRawTransactionResponse>(NULL);
  }

  SendRawTransactionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendRawTransactionResponse& from);
  void MergeFrom(const SendRawTransactionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRawTransactionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:core.SendRawTransactionResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_blockchain_5frpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetBlockRequest

// int32 block_height = 1;
inline void GetBlockRequest::clear_block_height() {
  block_height_ = 0;
}
inline ::google::protobuf::int32 GetBlockRequest::block_height() const {
  // @@protoc_insertion_point(field_get:core.GetBlockRequest.block_height)
  return block_height_;
}
inline void GetBlockRequest::set_block_height(::google::protobuf::int32 value) {
  
  block_height_ = value;
  // @@protoc_insertion_point(field_set:core.GetBlockRequest.block_height)
}

// -------------------------------------------------------------------

// GetBlockchainInfoRequest

// -------------------------------------------------------------------

// GetBlockCountRequest

// -------------------------------------------------------------------

// GetRawTransactionRequest

// string txid = 1;
inline void GetRawTransactionRequest::clear_txid() {
  txid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRawTransactionRequest::txid() const {
  // @@protoc_insertion_point(field_get:core.GetRawTransactionRequest.txid)
  return txid_.GetNoArena();
}
inline void GetRawTransactionRequest::set_txid(const ::std::string& value) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.GetRawTransactionRequest.txid)
}
#if LANG_CXX11
inline void GetRawTransactionRequest::set_txid(::std::string&& value) {
  
  txid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.GetRawTransactionRequest.txid)
}
#endif
inline void GetRawTransactionRequest::set_txid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.GetRawTransactionRequest.txid)
}
inline void GetRawTransactionRequest::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.GetRawTransactionRequest.txid)
}
inline ::std::string* GetRawTransactionRequest::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:core.GetRawTransactionRequest.txid)
  return txid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRawTransactionRequest::release_txid() {
  // @@protoc_insertion_point(field_release:core.GetRawTransactionRequest.txid)
  
  return txid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRawTransactionRequest::set_allocated_txid(::std::string* txid) {
  if (txid != NULL) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:core.GetRawTransactionRequest.txid)
}

// -------------------------------------------------------------------

// SendRawTransactionRequest

// string raw_transaction = 1;
inline void SendRawTransactionRequest::clear_raw_transaction() {
  raw_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendRawTransactionRequest::raw_transaction() const {
  // @@protoc_insertion_point(field_get:core.SendRawTransactionRequest.raw_transaction)
  return raw_transaction_.GetNoArena();
}
inline void SendRawTransactionRequest::set_raw_transaction(const ::std::string& value) {
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.SendRawTransactionRequest.raw_transaction)
}
#if LANG_CXX11
inline void SendRawTransactionRequest::set_raw_transaction(::std::string&& value) {
  
  raw_transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.SendRawTransactionRequest.raw_transaction)
}
#endif
inline void SendRawTransactionRequest::set_raw_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.SendRawTransactionRequest.raw_transaction)
}
inline void SendRawTransactionRequest::set_raw_transaction(const char* value, size_t size) {
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.SendRawTransactionRequest.raw_transaction)
}
inline ::std::string* SendRawTransactionRequest::mutable_raw_transaction() {
  
  // @@protoc_insertion_point(field_mutable:core.SendRawTransactionRequest.raw_transaction)
  return raw_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendRawTransactionRequest::release_raw_transaction() {
  // @@protoc_insertion_point(field_release:core.SendRawTransactionRequest.raw_transaction)
  
  return raw_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendRawTransactionRequest::set_allocated_raw_transaction(::std::string* raw_transaction) {
  if (raw_transaction != NULL) {
    
  } else {
    
  }
  raw_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_transaction);
  // @@protoc_insertion_point(field_set_allocated:core.SendRawTransactionRequest.raw_transaction)
}

// -------------------------------------------------------------------

// GetBlockResponse

// string block_data = 1;
inline void GetBlockResponse::clear_block_data() {
  block_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBlockResponse::block_data() const {
  // @@protoc_insertion_point(field_get:core.GetBlockResponse.block_data)
  return block_data_.GetNoArena();
}
inline void GetBlockResponse::set_block_data(const ::std::string& value) {
  
  block_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.GetBlockResponse.block_data)
}
#if LANG_CXX11
inline void GetBlockResponse::set_block_data(::std::string&& value) {
  
  block_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.GetBlockResponse.block_data)
}
#endif
inline void GetBlockResponse::set_block_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.GetBlockResponse.block_data)
}
inline void GetBlockResponse::set_block_data(const char* value, size_t size) {
  
  block_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.GetBlockResponse.block_data)
}
inline ::std::string* GetBlockResponse::mutable_block_data() {
  
  // @@protoc_insertion_point(field_mutable:core.GetBlockResponse.block_data)
  return block_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBlockResponse::release_block_data() {
  // @@protoc_insertion_point(field_release:core.GetBlockResponse.block_data)
  
  return block_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockResponse::set_allocated_block_data(::std::string* block_data) {
  if (block_data != NULL) {
    
  } else {
    
  }
  block_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block_data);
  // @@protoc_insertion_point(field_set_allocated:core.GetBlockResponse.block_data)
}

// -------------------------------------------------------------------

// GetBlockchainInfoResponse

// string chain_id = 1;
inline void GetBlockchainInfoResponse::clear_chain_id() {
  chain_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetBlockchainInfoResponse::chain_id() const {
  // @@protoc_insertion_point(field_get:core.GetBlockchainInfoResponse.chain_id)
  return chain_id_.GetNoArena();
}
inline void GetBlockchainInfoResponse::set_chain_id(const ::std::string& value) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.GetBlockchainInfoResponse.chain_id)
}
#if LANG_CXX11
inline void GetBlockchainInfoResponse::set_chain_id(::std::string&& value) {
  
  chain_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.GetBlockchainInfoResponse.chain_id)
}
#endif
inline void GetBlockchainInfoResponse::set_chain_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.GetBlockchainInfoResponse.chain_id)
}
inline void GetBlockchainInfoResponse::set_chain_id(const char* value, size_t size) {
  
  chain_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.GetBlockchainInfoResponse.chain_id)
}
inline ::std::string* GetBlockchainInfoResponse::mutable_chain_id() {
  
  // @@protoc_insertion_point(field_mutable:core.GetBlockchainInfoResponse.chain_id)
  return chain_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetBlockchainInfoResponse::release_chain_id() {
  // @@protoc_insertion_point(field_release:core.GetBlockchainInfoResponse.chain_id)
  
  return chain_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockchainInfoResponse::set_allocated_chain_id(::std::string* chain_id) {
  if (chain_id != NULL) {
    
  } else {
    
  }
  chain_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_id);
  // @@protoc_insertion_point(field_set_allocated:core.GetBlockchainInfoResponse.chain_id)
}

// int32 block_count = 2;
inline void GetBlockchainInfoResponse::clear_block_count() {
  block_count_ = 0;
}
inline ::google::protobuf::int32 GetBlockchainInfoResponse::block_count() const {
  // @@protoc_insertion_point(field_get:core.GetBlockchainInfoResponse.block_count)
  return block_count_;
}
inline void GetBlockchainInfoResponse::set_block_count(::google::protobuf::int32 value) {
  
  block_count_ = value;
  // @@protoc_insertion_point(field_set:core.GetBlockchainInfoResponse.block_count)
}

// -------------------------------------------------------------------

// GetBlockCountResponse

// int32 block_count = 1;
inline void GetBlockCountResponse::clear_block_count() {
  block_count_ = 0;
}
inline ::google::protobuf::int32 GetBlockCountResponse::block_count() const {
  // @@protoc_insertion_point(field_get:core.GetBlockCountResponse.block_count)
  return block_count_;
}
inline void GetBlockCountResponse::set_block_count(::google::protobuf::int32 value) {
  
  block_count_ = value;
  // @@protoc_insertion_point(field_set:core.GetBlockCountResponse.block_count)
}

// -------------------------------------------------------------------

// GetRawTransactionResponse

// string raw_transaction = 1;
inline void GetRawTransactionResponse::clear_raw_transaction() {
  raw_transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetRawTransactionResponse::raw_transaction() const {
  // @@protoc_insertion_point(field_get:core.GetRawTransactionResponse.raw_transaction)
  return raw_transaction_.GetNoArena();
}
inline void GetRawTransactionResponse::set_raw_transaction(const ::std::string& value) {
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:core.GetRawTransactionResponse.raw_transaction)
}
#if LANG_CXX11
inline void GetRawTransactionResponse::set_raw_transaction(::std::string&& value) {
  
  raw_transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:core.GetRawTransactionResponse.raw_transaction)
}
#endif
inline void GetRawTransactionResponse::set_raw_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:core.GetRawTransactionResponse.raw_transaction)
}
inline void GetRawTransactionResponse::set_raw_transaction(const char* value, size_t size) {
  
  raw_transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:core.GetRawTransactionResponse.raw_transaction)
}
inline ::std::string* GetRawTransactionResponse::mutable_raw_transaction() {
  
  // @@protoc_insertion_point(field_mutable:core.GetRawTransactionResponse.raw_transaction)
  return raw_transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetRawTransactionResponse::release_raw_transaction() {
  // @@protoc_insertion_point(field_release:core.GetRawTransactionResponse.raw_transaction)
  
  return raw_transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetRawTransactionResponse::set_allocated_raw_transaction(::std::string* raw_transaction) {
  if (raw_transaction != NULL) {
    
  } else {
    
  }
  raw_transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), raw_transaction);
  // @@protoc_insertion_point(field_set_allocated:core.GetRawTransactionResponse.raw_transaction)
}

// -------------------------------------------------------------------

// SendRawTransactionResponse

// bool success = 1;
inline void SendRawTransactionResponse::clear_success() {
  success_ = false;
}
inline bool SendRawTransactionResponse::success() const {
  // @@protoc_insertion_point(field_get:core.SendRawTransactionResponse.success)
  return success_;
}
inline void SendRawTransactionResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:core.SendRawTransactionResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace core

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_blockchain_5frpc_2eproto
